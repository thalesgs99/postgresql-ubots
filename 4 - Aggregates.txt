		Count the number of facilities

select count(facid) as count from facilities;

		Count the number of expensive facilities

select count(facid) as count from facilities where guestcost >= 10;

		Count the number of recommendations each member makes.

select recommendedby ,count(recommendedby) as count 
	from members where recommendedby 
		is not null group by recommendedby order by recommendedby;

		List the total slots booked per facility

select facid, sum(slots) as "Total Slots" from bookings group by facid order by facid; 

		List the total slots booked per facility in a given month

select facid, sum(slots) as "Total Slots" from bookings where
	starttime >= '2012-09-01' and starttime < '2012-10-01' group by facid order by sum(slots);

		List the total slots booked per facility per month

select facid, extract(month from starttime) as month, sum(slots) as "Total Slots"
	from bookings 
	where extract(year from starttime) = 2012 group by facid, month;

		Find the count of members who have made at least one booking

select count(*) from (select distinct memid from bookings) as mem; 

		List facilities with more than 1000 slots booked

select facid, sum(slots) as "Total Slots" from cd.bookings group by facid having sum(slots) > 1000 order by facid;
		
		Find the total revenue of each facility

select fac.name, sum(slots * case
	when memid = 0 then fac.guestcost
	else fac.membercost
	end) as revenue
		from cd.bookings as boo
		inner join cd.facilities as fac
			on boo.facid = fac.facid group by fac.name order by revenue;

		Find facilities with a total revenue less than 1000

select fac.name, sum(slots * case
	when memid = 0 then fac.guestcost
	else fac.membercost end) as revenue
	from bookings as boo inner join facilities as fac on boo.facid = fac.facid
	group by fac.name having sum(slots * case
	when memid = 0 then fac.guestcost
	else fac.membercost end) < 1000 order by revenue;

		Output the facility id that has the highest number of slots booked

select facid, sum(slots) as totalslots
	from bookings
	group by facid
	having sum(slots) = (select max(sum2.totalslots) from
		(select sum(slots) as totalslots
		from bookings
		group by facid
		) as sum2);

		List the total slots booked per facility per month, part 2

select facid,(select extract (month from starttime)) as month, sum(slots) 
	from bookings 
		where starttime >= '2012-01-01' and starttime < '2013-01-01'
	group by rollup(facid, month) order by facid, month;
		
		List the total hours booked per named facility

select facs.facid, facs.name,
	trim(to_char(sum(bks.slots)/2.0, '9999999999999999D99')) as "Total Hours"
	from bookings bks
	inner join facilities facs
		on facs.facid = bks.facid
	group by facs.facid, facs.name
order by facs.facid;

		List each member's first booking after September 1st 2012

select mem.surname, mem.firstname, mem.memid, min(starttime) from members as mem 
	inner join bookings as boo on mem.memid = boo.memid 
	where starttime > '2012-09-01'
	group by mem.surname, mem.firstname, mem.memid
	order by mem.memid;

		Produce a list of member names, with each row containing the total member countProduce a list of member names, with each row containing the total member count

select (select count(memid) from members) as count, firstname, surname from members group by firstname, surname, memid
order by memid;

		Produce a numbered list of members

select row_number() over (order by joindate) as row_number, firstname, surname from members order by joindate; 

		Output the facility id that has the highest number of slots booked, again

select facid, total from (
	select facid, sum(slots) total, rank() over (order by sum(slots) desc) rank
        	from bookings
		group by facid
	) as ranked
	where rank = 1;  
		
		Rank members by (rounded) hours used

select firstname, surname,
	((sum(bks.slots)+10)/20)*10 as hours,
	rank() over (order by ((sum(bks.slots)+10)/20)*10 desc) as rank

	from bookings bks
	inner join members mems
		on bks.memid = mems.memid
	group by mems.memid, mems.firstname, mems.surname
order by rank, surname, firstname;

		Find the top three revenue generating facilities

select name, rank from (
	select facs.name as name, rank() over (order by sum(case
				when memid = 0 then slots * facs.guestcost
				else slots * membercost
			end) desc) as rank
		from bookings bks
		inner join facilities facs
			on bks.facid = facs.facid
		group by facs.name
	) as subq
	where rank <= 3
order by rank;   

		Classify facilities by value

select name, case when class=1 then 'high'
		when class=2 then 'average'
		else 'low'
		end revenue
	from (
		select facs.name as name, ntile(3) over (order by sum(case
				when memid = 0 then slots * facs.guestcost
				else slots * membercost
			end) desc) as class
		from bookings bks
		inner join facilities facs
			on bks.facid = facs.facid
		group by facs.name
	) as subq
order by class, name;

		Calculate the payback time for each facility

select 	facs.name as name,
	facs.initialoutlay/((sum(case
			when memid = 0 then slots * facs.guestcost
			else slots * membercost
		end)/3) - facs.monthlymaintenance) as months
	from bookings bks
	inner join facilities facs
		on bks.facid = facs.facid
	group by facs.facid, facs.name, facs.initialoutlay, facs.monthlymaintenance
order by name; 

		Calculate a rolling average of total revenue

select 	dategen.date,
	(

		select sum(case
			when memid = 0 then slots * facs.guestcost
			else slots * membercost
		end) as rev

		from bookings bks
		inner join facilities facs
			on bks.facid = facs.facid
		where bks.starttime > dategen.date - interval '14 days'
			and bks.starttime < dategen.date + interval '1 day'
	)/15 as revenue
	from
	(
		select 	cast(generate_series(timestamp '2012-08-01',
			'2012-08-31','1 day') as date) as date
	)  as dategen
order by dategen.date; 









		






		






		












		




		

		


		

		

		

		
		
		
		
		

		

		